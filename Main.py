import os
import aiohttp
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

API_URL = "https://api.frankfurter.app"
CURRENCIES = {}  # All available currencies
TOKEN = os.getenv("BOT_TOKEN")  # Railway –±–µ—Ä–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

# "/start" command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç üí±\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /convert <—Å—É–º–º–∞> <–∏–∑_–≤–∞–ª—é—Ç—ã> <–≤_–≤–∞–ª—é—Ç—É>\n"
        "–ü—Ä–∏–º–µ—Ä: /convert 100 USD RUB\n"
        "–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç: /currencies"
    )

# "/currencies" command handler, displays all available currencies
async def currencies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CURRENCIES
    if not CURRENCIES:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/currencies") as resp:  # Request to API
                CURRENCIES = await resp.json()

    text = "üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n" + "\n".join([f"{k} ‚Äî {v}" for k, v in CURRENCIES.items()])
    await update.message.reply_text(text)

# "/convert" command handler, converts currency and displays it
async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CURRENCIES
    if not CURRENCIES:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/currencies") as resp:  # Request to API
                CURRENCIES = await resp.json()

    if len(context.args) != 3:  # Checking for correct number of args
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /convert <—Å—É–º–º–∞> <–∏–∑_–≤–∞–ª—é—Ç—ã> <–≤_–≤–∞–ª—é—Ç—É>")
        return

    try:
        amount = float(context.args[0])
        from_currency = context.args[1].upper()
        to_currency = context.args[2].upper()

        if from_currency not in CURRENCIES or to_currency not in CURRENCIES:  # Checking if currency is in list of available
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π /currencies –¥–ª—è —Å–ø–∏—Å–∫–∞.")
            return

        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/latest", params={  # Request to API
                "amount": amount,
                "from": from_currency,
                "to": to_currency
            }) as resp:
                data = await resp.json()

        rate = data["rates"].get(to_currency)
        if not rate:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            return

        await update.message.reply_text(f"{amount} {from_currency} = {rate} {to_currency}")

    except ValueError:
        await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

def main():  # Main function
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("currencies", currencies))
    app.add_handler(CommandHandler("convert", convert))

    app.run_polling()


main()
